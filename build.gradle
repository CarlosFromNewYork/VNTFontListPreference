apply plugin: 'com.github.ben-manes.versions'

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'

        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
    }
}

subprojects {
    repositories {
        jcenter()
    }

    group = GROUP
    version = VERSION_NAME

    plugins.apply('net.ltgt.errorprone')

    plugins.apply('pmd')

    pmd {
        toolVersion = '5.4.1'
    }

    task pmd(type: Pmd) {
        ignoreFailures = false
        ruleSetFiles = project.files(rootProject.file("code_quality_tools/pmd.xml"))
        ruleSets = []

        source = fileTree('src/main/java')
    }

    plugins.apply('findbugs')

    task findbugs(type: FindBugs) {
        ignoreFailures = false
        effort = 'max'
        reportLevel = 'low'

        classes = files("${project.projectDir}/build/intermediates/classes")
        source = fileTree('src/main/java')

        classpath = files()

        excludeFilter = rootProject.file('code_quality_tools/findbugs-filter.xml')
    }

    plugins.apply('checkstyle')

    checkstyle {
        toolVersion = '6.13'
    }

    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('code_quality_tools/checkstyle.xml')

        ignoreFailures false
        showViolations true

        source 'src'
        include '**/*.java'

        classpath = files()
    }

    afterEvaluate {
        tasks.findByName('pmd').dependsOn('assemble')
        tasks.findByName('findbugs').dependsOn('assemble')

        def checkTask = tasks.findByName('check')

        checkTask.dependsOn('pmd')
        checkTask.dependsOn('findbugs')
        checkTask.dependsOn('checkstyle')
    }
}

ext {
    minSdkVersion = 14
    compileSdkVersion = 23
    targetSdkVersion = 23
    buildToolsVersion = '23.0.2'

    supportLibraryVersion = '23.1.1'
    leakCanaryVersion = '1.3.1'

    versionCode = VERSION_CODE
    versionName = VERSION_NAME

    junit = 'junit:junit:4.12'
    mockito = 'org.mockito:mockito-core:1.10.19'
    robolectric = 'org.robolectric:robolectric:3.0'

    supportAppCompat = "com.android.support:appcompat-v7:$supportLibraryVersion"

    leakCanaryDebug = "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    leakCanaryRelease = "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    javaVersion = JavaVersion.VERSION_1_7
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}